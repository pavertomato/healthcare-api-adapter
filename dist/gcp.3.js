/*! For license information please see gcp.3.js.LICENSE */
(this.gcp_jsonp=this.gcp_jsonp||[]).push([[3],{"./node_modules/css-loader/lib/url/escape.js":function(module,exports){eval("module.exports = function escape(url) {\n    if (typeof url !== 'string') {\n        return url\n    }\n    // If url is already wrapped in quotes, remove them\n    if (/^['\"].*['\"]$/.test(url)) {\n        url = url.slice(1, -1);\n    }\n    // Should url be wrapped?\n    // See https://drafts.csswg.org/css-values-3/#urls\n    if (/[\"'() \\t\\n]/.test(url)) {\n        return '\"' + url.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n') + '\"'\n    }\n\n    return url\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzP2IwNDEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlc2NhcGUodXJsKSB7XG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICB9XG4gICAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gICAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gICAgfVxuICAgIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICAgIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gJ1wiJyArIHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpICsgJ1wiJ1xuICAgIH1cblxuICAgIHJldHVybiB1cmxcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/lib/url/escape.js\n")},"./node_modules/dicomweb-client/build/dicomweb-client.js":function(module,exports,__webpack_require__){eval("(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  /**\n   * Converts a Uint8Array to a String.\n   * @param {Uint8Array} array that should be converted\n   * @param {Number} offset array offset in case only subset of array items should be extracted (default: 0)\n   * @param {Number} limit maximum number of array items that should be extracted (defaults to length of array)\n   * @returns {String}\n   */\n  function uint8ArrayToString(arr, offset, limit) {\n    offset = offset || 0;\n    limit = limit || arr.length - offset;\n    var str = '';\n\n    for (var i = offset; i < offset + limit; i++) {\n      str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n  }\n  /**\n   * Converts a String to a Uint8Array.\n   * @param {String} str string that should be converted\n   * @returns {Uint8Array}\n   */\n\n\n  function stringToUint8Array(str) {\n    var arr = new Uint8Array(str.length);\n\n    for (var i = 0, j = str.length; i < j; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n\n    return arr;\n  }\n  /**\n   * Identifies the boundary in a multipart/related message header.\n   * @param {String} header message header\n   * @returns {String} boundary\n   */\n\n\n  function identifyBoundary(header) {\n    var parts = header.split('\\r\\n');\n\n    for (var i = 0; i < parts.length; i++) {\n      if (parts[i].substr(0, 2) === '--') {\n        return parts[i];\n      }\n    }\n  }\n  /**\n   * Checks whether a given token is contained by a message at a given offset.\n   * @param {Uint8Array} message message content\n   * @param {Uint8Array} token substring that should be present\n   * @param {String} offset offset in message content from where search should start\n   * @returns {Boolean} whether message contains token at offset\n   */\n\n\n  function containsToken(message, token) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    if (message + token.length > message.length) {\n      return false;\n    }\n\n    var index = offset;\n\n    for (var i = 0; i < token.length; i++) {\n      if (token[i] !== message[index++]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Finds a given token in a message at a given offset.\n   * @param {Uint8Array} message message content\n   * @param {Uint8Array} token substring that should be found\n   * @param {String} offset message body offset from where search should start\n   * @returns {Boolean} whether message has a part at given offset or not\n   */\n\n\n  function findToken(message, token) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var messageLength = message.length;\n\n    for (var i = offset; i < messageLength; i++) {\n      // If the first value of the message matches\n      // the first value of the token, check if\n      // this is the full token.\n      if (message[i] === token[0]) {\n        if (containsToken(message, token, i)) {\n          return i;\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * @typedef {Object} MultipartEncodedData\n   * @property {ArrayBuffer} data The encoded Multipart Data\n   * @property {String} boundary The boundary used to divide pieces of the encoded data\n   */\n\n  /**\n   * Encode one or more DICOM datasets into a single body so it can be\n   * sent using the Multipart Content-Type.\n   *\n   * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the multipart body, passed as ArrayBuffers.\n   * @param {String} [boundary] Optional string to define a boundary between each part of the multipart body. If this is not specified, a random GUID will be generated.\n   * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This contains both the data itself, and the boundary string used to divide it.\n   */\n\n\n  function multipartEncode(datasets) {\n    var boundary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : guid();\n    var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'application/dicom';\n    var contentTypeString = \"Content-Type: \".concat(contentType);\n    var header = \"\\r\\n--\".concat(boundary, \"\\r\\n\").concat(contentTypeString, \"\\r\\n\\r\\n\");\n    var footer = \"\\r\\n--\".concat(boundary, \"--\");\n    var headerArray = stringToUint8Array(header);\n    var footerArray = stringToUint8Array(footer);\n    var headerLength = headerArray.length;\n    var footerLength = footerArray.length;\n    var length = 0; // Calculate the total length for the final array\n\n    var contentArrays = datasets.map(function (datasetBuffer) {\n      var contentArray = new Uint8Array(datasetBuffer);\n      var contentLength = contentArray.length;\n      length += headerLength + contentLength + footerLength;\n      return contentArray;\n    }); // Allocate the array\n\n    var multipartArray = new Uint8Array(length); // Set the initial header\n\n    multipartArray.set(headerArray, 0); // Write each dataset into the multipart array\n\n    var position = 0;\n    contentArrays.forEach(function (contentArray) {\n      var contentLength = contentArray.length;\n      multipartArray.set(headerArray, position);\n      multipartArray.set(contentArray, position + headerLength);\n      position += headerLength + contentArray.length;\n    });\n    multipartArray.set(footerArray, position);\n    return {\n      data: multipartArray.buffer,\n      boundary: boundary\n    };\n  }\n  /**\n   * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n   *\n   * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n   * @returns {Array} The content\n   */\n\n  function multipartDecode(response) {\n    var message = new Uint8Array(response); // First look for the multipart mime header\n\n    var separator = stringToUint8Array('\\r\\n\\r\\n');\n    var headerIndex = findToken(message, separator);\n\n    if (headerIndex === -1) {\n      throw new Error('Response message has no multipart mime header');\n    }\n\n    var header = uint8ArrayToString(message, 0, headerIndex);\n    var boundaryString = identifyBoundary(header);\n\n    if (!boundaryString) {\n      throw new Error('Header of response message does not specify boundary');\n    }\n\n    var boundary = stringToUint8Array(boundaryString);\n    var boundaryLength = boundary.length;\n    var components = [];\n    var offset = headerIndex + separator.length; // Loop until we cannot find any more boundaries\n\n    var boundaryIndex;\n\n    while (boundaryIndex !== -1) {\n      // Search for the next boundary in the message, starting\n      // from the current offset position\n      boundaryIndex = findToken(message, boundary, offset); // If no further boundaries are found, stop here.\n\n      if (boundaryIndex === -1) {\n        break;\n      } // Extract data from response message, excluding \"\\r\\n\"\n\n\n      var spacingLength = 2;\n      var length = boundaryIndex - offset - spacingLength;\n      var data = response.slice(offset, offset + length); // Add the data to the array of results\n\n      components.push(data); // Move the offset to the end of the current section,\n      // plus the identified boundary\n\n      offset += length + spacingLength + boundaryLength;\n    }\n\n    return components;\n  }\n  /**\n   * Create a random GUID\n   *\n   * @return {string}\n   */\n\n\n  function guid() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  function isEmptyObject(obj) {\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\n  }\n\n  var getFirstResult = function getFirstResult(result) {\n    return result[0];\n  };\n\n  var MIMETYPES = {\n    DICOM: 'application/dicom',\n    DICOM_JSON: 'application/dicom+json',\n    OCTET_STREAM: 'application/octet-stream'\n  };\n  /**\n  * Class for interacting with DICOMweb RESTful services.\n  */\n\n  var DICOMwebClient =\n  /*#__PURE__*/\n  function () {\n    /**\n    * @constructor\n    * @param {Object} options (choices: \"url\", \"username\", \"password\", \"headers\")\n    */\n    function DICOMwebClient(options) {\n      _classCallCheck(this, DICOMwebClient);\n\n      this.baseURL = options.url;\n\n      if (!this.baseURL) {\n        console.error('DICOMweb base url provided - calls will fail');\n      }\n\n      if ('username' in options) {\n        this.username = options.username;\n\n        if (!('password' in options)) {\n          console.error('no password provided to authenticate with DICOMweb service');\n        }\n\n        this.password = options.password;\n      }\n\n      this.headers = options.headers || {};\n    }\n\n    _createClass(DICOMwebClient, [{\n      key: \"_httpRequest\",\n      value: function _httpRequest(url, method, headers) {\n        var _this = this;\n\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        return new Promise(function (resolve, reject) {\n          var request = new XMLHttpRequest();\n          request.open(method, url, true);\n\n          if ('responseType' in options) {\n            request.responseType = options.responseType;\n          }\n\n          if (_typeof(headers) === 'object') {\n            Object.keys(headers).forEach(function (key) {\n              request.setRequestHeader(key, headers[key]);\n            });\n          } // now add custom headers from the user\n          // (e.g. access tokens)\n\n\n          var userHeaders = _this.headers;\n          Object.keys(userHeaders).forEach(function (key) {\n            request.setRequestHeader(key, userHeaders[key]);\n          }); // Event triggered when upload starts\n\n          request.onloadstart = function (event) {//console.log('upload started: ', url)\n          }; // Event triggered when upload ends\n\n\n          request.onloadend = function (event) {//console.log('upload finished')\n          }; // Handle response message\n\n\n          request.onreadystatechange = function (event) {\n            if (request.readyState === 4) {\n              if (request.status === 200) {\n                resolve(request.response);\n              } else if (request.status === 202) {\n                console.warn('some resources already existed: ', request);\n                resolve(request.response);\n              } else if (request.status === 204) {\n                console.warn('empty response for request: ', request);\n                resolve([]);\n              } else {\n                console.error('request failed: ', request);\n                var error = new Error('request failed');\n                error.request = request;\n                error.response = request.response;\n                error.status = request.status;\n                console.error(error);\n                console.error(error.response);\n                reject(error);\n              }\n            }\n          }; // Event triggered while download progresses\n\n\n          if ('progressCallback' in options) {\n            if (typeof options.progressCallback === 'function') {\n              request.onprogress = options.progressCallback;\n            }\n          } // request.onprogress = function (event) {\n          //   const loaded = progress.loaded;\n          //   let total;\n          //   let percentComplete;\n          //   if (progress.lengthComputable) {\n          //     total = progress.total;\n          //     percentComplete = Math.round((loaded / total) * 100);\n          //   j\n          //   // console.log('download progress: ', percentComplete, ' %');\n          //   return(percentComplete);\n          // };\n\n\n          if ('data' in options) {\n            request.send(options.data);\n          } else {\n            request.send();\n          }\n        });\n      }\n    }, {\n      key: \"_httpGet\",\n      value: function _httpGet(url, headers, responseType, progressCallback) {\n        return this._httpRequest(url, 'get', headers, {\n          responseType: responseType,\n          progressCallback: progressCallback\n        });\n      }\n    }, {\n      key: \"_httpGetApplicationJson\",\n      value: function _httpGetApplicationJson(url) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var progressCallback = arguments.length > 2 ? arguments[2] : undefined;\n\n        if (_typeof(params) === 'object') {\n          if (!isEmptyObject(params)) {\n            url += DICOMwebClient._parseQueryParameters(params);\n          }\n        }\n\n        var headers = {\n          'Accept': MIMETYPES.DICOM_JSON\n        };\n        var responseType = 'json';\n        return this._httpGet(url, headers, responseType, progressCallback);\n      }\n    }, {\n      key: \"_httpGetByMimeType\",\n      value: function _httpGetByMimeType(url, mimeType, params) {\n        var responseType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'arraybuffer';\n        var progressCallback = arguments.length > 4 ? arguments[4] : undefined;\n\n        if (_typeof(params) === 'object') {\n          if (!isEmptyObject(params)) {\n            url += DICOMwebClient._parseQueryParameters(params);\n          }\n        }\n\n        var headers = {\n          'Accept': \"multipart/related; type=\\\"\".concat(mimeType, \"\\\"\")\n        };\n        return this._httpGet(url, headers, responseType, progressCallback);\n      }\n    }, {\n      key: \"_httpPost\",\n      value: function _httpPost(url, headers, data, progressCallback) {\n        return this._httpRequest(url, 'post', headers, {\n          data: data,\n          progressCallback: progressCallback\n        });\n      }\n    }, {\n      key: \"_httpPostApplicationJson\",\n      value: function _httpPostApplicationJson(url, data, progressCallback) {\n        var headers = {\n          'Content-Type': MIMETYPES.DICOM_JSON\n        };\n        return this._httpPost(url, headers, data, progressCallback);\n      }\n      /**\n       * Searches for DICOM studies.\n       * @param {Object} options options object - \"queryParams\" optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n       * @return {Array} study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n       */\n\n    }, {\n      key: \"searchForStudies\",\n      value: function searchForStudies() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        console.log('search for studies');\n        var url = this.baseURL + '/studies';\n\n        if ('queryParams' in options) {\n          url += DICOMwebClient._parseQueryParameters(options.queryParams);\n        }\n\n        return this._httpGetApplicationJson(url);\n      }\n      /**\n       * Retrieves metadata for a DICOM study.\n       * @param {String} studyInstanceUID Study Instance UID\n       * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the study\n       */\n\n    }, {\n      key: \"retrieveStudyMetadata\",\n      value: function retrieveStudyMetadata(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required for retrieval of study metadata');\n        }\n\n        console.log(\"retrieve metadata of study \".concat(options.studyInstanceUID));\n        var url = this.baseURL + '/studies/' + options.studyInstanceUID + '/metadata';\n        return this._httpGetApplicationJson(url);\n      }\n      /**\n       * Searches for DICOM series.\n       * @param {Object} options optional DICOM identifiers (choices: \"studyInstanceUID\")\n       * @param {Object} queryParams optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n       * @returns {Array} series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n       */\n\n    }, {\n      key: \"searchForSeries\",\n      value: function searchForSeries() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var url = this.baseURL;\n\n        if ('studyInstanceUID' in options) {\n          console.log(\"search series of study \".concat(options.studyInstanceUID));\n          url += '/studies/' + options.studyInstanceUID;\n        }\n\n        url += '/series';\n\n        if ('queryParams' in options) {\n          url += DICOMwebClient._parseQueryParameters(options.queryParams);\n        }\n\n        return this._httpGetApplicationJson(url);\n      }\n      /**\n       * Retrieves metadata for a DICOM series.\n       * @param {String} studyInstanceUID Study Instance UID\n       * @param {String} seriesInstanceUID Series Instance UID\n       * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the series\n       */\n\n    }, {\n      key: \"retrieveSeriesMetadata\",\n      value: function retrieveSeriesMetadata(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required for retrieval of series metadata');\n        }\n\n        if (!('seriesInstanceUID' in options)) {\n          throw new Error('Series Instance UID is required for retrieval of series metadata');\n        }\n\n        console.log(\"retrieve metadata of series \".concat(options.seriesInstanceUID));\n        var url = this.baseURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/metadata';\n        return this._httpGetApplicationJson(url);\n      }\n      /**\n       * Searches for DICOM instances.\n       * @param {Object} options optional DICOM identifiers (choices: \"studyInstanceUID\", \"seriesInstanceUID\")\n       * @param {Object} queryParams optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n       * @returns {Array} instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n       */\n\n    }, {\n      key: \"searchForInstances\",\n      value: function searchForInstances() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var url = this.baseURL;\n\n        if ('studyInstanceUID' in options) {\n          url += '/studies/' + options.studyInstanceUID;\n\n          if ('seriesInstanceUID' in options) {\n            console.log(\"search for instances of series \".concat(options.seriesInstanceUID));\n            url += '/series/' + options.seriesInstanceUID;\n          } else {\n            console.log(\"search for instances of study \".concat(options.studyInstanceUID));\n          }\n        } else {\n          console.log('search for instances');\n        }\n\n        url += '/instances';\n\n        if ('queryParams' in options) {\n          url += DICOMwebClient._parseQueryParameters(options.queryParams);\n        }\n\n        return this._httpGetApplicationJson(url);\n      }\n      /** Returns a WADO-URI URL for an instance\n       *\n       * @param {Object} options\n       * @returns {String} WADO-URI URL\n       */\n\n    }, {\n      key: \"buildInstanceWadoURIUrl\",\n      value: function buildInstanceWadoURIUrl(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required.');\n        }\n\n        if (!('seriesInstanceUID' in options)) {\n          throw new Error('Series Instance UID is required.');\n        }\n\n        if (!('sopInstanceUID' in options)) {\n          throw new Error('SOP Instance UID is required.');\n        }\n\n        var contentType = options.contentType || MIMETYPES.DICOM;\n        var transferSyntax = options.transferSyntax || '*';\n        var params = [];\n        params.push('requestType=WADO');\n        params.push(\"studyUID=\".concat(options.studyInstanceUID));\n        params.push(\"seriesUID=\".concat(options.seriesInstanceUID));\n        params.push(\"objectUID=\".concat(options.sopInstanceUID));\n        params.push(\"contentType=\".concat(contentType));\n        params.push(\"transferSyntax=\".concat(transferSyntax));\n        var paramString = params.join('&');\n        return \"\".concat(this.baseURL, \"?\").concat(paramString);\n      }\n      /**\n       * Retrieves metadata for a DICOM instance.\n       * @param {String} studyInstanceUID Study Instance UID\n       * @param {String} seriesInstanceUID Series Instance UID\n       * @param {String} sopInstanceUID SOP Instance UID\n       * @returns {Object} metadata elements in DICOM JSON format\n       */\n\n    }, {\n      key: \"retrieveInstanceMetadata\",\n      value: function retrieveInstanceMetadata(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required for retrieval of instance metadata');\n        }\n\n        if (!('seriesInstanceUID' in options)) {\n          throw new Error('Series Instance UID is required for retrieval of instance metadata');\n        }\n\n        if (!('sopInstanceUID' in options)) {\n          throw new Error('SOP Instance UID is required for retrieval of instance metadata');\n        }\n\n        console.log(\"retrieve metadata of instance \".concat(options.sopInstanceUID));\n        var url = this.baseURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/instances/' + options.sopInstanceUID + '/metadata';\n        return this._httpGetApplicationJson(url);\n      }\n      /**\n       * Retrieves frames for a DICOM instance.\n       * @param {String} studyInstanceUID Study Instance UID\n       * @param {String} seriesInstanceUID Series Instance UID\n       * @param {String} sopInstanceUID SOP Instance UID\n       * @param {Array} frameNumbers one-based index of frames\n       * @param {Object} options optional parameters (key \"imageSubtype\" to specify MIME image subtypes)\n       * @returns {Array} frame items as byte arrays of the pixel data element\n       */\n\n    }, {\n      key: \"retrieveInstanceFrames\",\n      value: function retrieveInstanceFrames(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required for retrieval of instance metadata');\n        }\n\n        if (!('seriesInstanceUID' in options)) {\n          throw new Error('Series Instance UID is required for retrieval of instance metadata');\n        }\n\n        if (!('sopInstanceUID' in options)) {\n          throw new Error('SOP Instance UID is required for retrieval of instance metadata');\n        }\n\n        if (!('frameNumbers' in options)) {\n          throw new Error('frame numbers are required for retrieval of instance frames');\n        }\n\n        console.log(\"retrieve frames \".concat(options.frameNumbers.toString(), \" of instance \").concat(options.sopInstanceUID));\n        var url = this.baseURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/instances/' + options.sopInstanceUID + '/frames/' + options.frameNumbers.toString(); // TODO: Easier if user just provided mimetype directly? What is the benefit of adding 'image/'?\n\n        var mimeType = options.imageSubType ? \"image/\".concat(options.imageSubType) : MIMETYPES.OCTET_STREAM;\n        return this._httpGetByMimeType(url, mimeType).then(multipartDecode);\n      }\n      /**\n       * Retrieves a DICOM instance.\n       *\n       * @param {String} studyInstanceUID Study Instance UID\n       * @param {String} seriesInstanceUID Series Instance UID\n       * @param {String} sopInstanceUID SOP Instance UID\n       * @returns {Arraybuffer} DICOM Part 10 file as Arraybuffer\n       */\n\n    }, {\n      key: \"retrieveInstance\",\n      value: function retrieveInstance(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required');\n        }\n\n        if (!('seriesInstanceUID' in options)) {\n          throw new Error('Series Instance UID is required');\n        }\n\n        if (!('sopInstanceUID' in options)) {\n          throw new Error('SOP Instance UID is required');\n        }\n\n        var url = this.baseURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/instances/' + options.sopInstanceUID;\n        return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode).then(getFirstResult);\n      }\n      /**\n       * Retrieves a set of DICOM instance for a series.\n       *\n       * @param {String} studyInstanceUID Study Instance UID\n       * @param {String} seriesInstanceUID Series Instance UID\n       * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n       */\n\n    }, {\n      key: \"retrieveSeries\",\n      value: function retrieveSeries(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required');\n        }\n\n        if (!('seriesInstanceUID' in options)) {\n          throw new Error('Series Instance UID is required');\n        }\n\n        var url = this.baseURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID;\n        return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n      }\n      /**\n       * Retrieves a set of DICOM instance for a study.\n       *\n       * @param {String} studyInstanceUID Study Instance UID\n       * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n       */\n\n    }, {\n      key: \"retrieveStudy\",\n      value: function retrieveStudy(options) {\n        if (!('studyInstanceUID' in options)) {\n          throw new Error('Study Instance UID is required');\n        }\n\n        var url = this.baseURL + '/studies/' + options.studyInstanceUID;\n        return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n      }\n      /**\n       * Retrieve and parse BulkData from a BulkDataURI location.\n       * Decodes the multipart encoded data and returns the resulting data\n       * as an ArrayBuffer.\n       *\n       * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\n       *\n       * @param {Object} options\n       * @return {Promise}\n       */\n\n    }, {\n      key: \"retrieveBulkData\",\n      value: function retrieveBulkData(options) {\n        if (!('BulkDataURI' in options)) {\n          throw new Error('BulkDataURI is required.');\n        }\n\n        return this._httpGetByMimeType(options.BulkDataURI, MIMETYPES.OCTET_STREAM).then(multipartDecode).then(getFirstResult);\n      }\n      /**\n       * Stores DICOM instances.\n       * @param {Array} datasets DICOM datasets of instances that should be stored in DICOM JSON format\n       * @param {Object} options optional parameters (key \"studyInstanceUID\" to only store instances of a given study)\n       */\n\n    }, {\n      key: \"storeInstances\",\n      value: function storeInstances(options) {\n        if (!('datasets' in options)) {\n          throw new Error('datasets are required for storing');\n        }\n\n        var url = \"\".concat(this.baseURL, \"/studies\");\n\n        if ('studyInstanceUID' in options) {\n          url += \"/\".concat(options.studyInstanceUID);\n        }\n\n        var _multipartEncode = multipartEncode(options.datasets),\n            data = _multipartEncode.data,\n            boundary = _multipartEncode.boundary;\n\n        var headers = {\n          'Content-Type': \"multipart/related; type=application/dicom; boundary=\".concat(boundary)\n        };\n        return this._httpPost(url, headers, data, options.progressCallback);\n      }\n    }], [{\n      key: \"_parseQueryParameters\",\n      value: function _parseQueryParameters() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var queryString = '?';\n        Object.keys(params).forEach(function (key, index) {\n          if (index !== 0) {\n            queryString += '&';\n          }\n\n          queryString += key + '=' + encodeURIComponent(params[key]);\n        });\n        return queryString;\n      }\n    }]);\n\n    return DICOMwebClient;\n  }();\n\n  function findSubstring(str, before, after) {\n    var beforeIndex = str.lastIndexOf(before) + before.length;\n\n    if (beforeIndex < before.length) {\n      return null;\n    }\n\n    if (after !== undefined) {\n      var afterIndex = str.lastIndexOf(after);\n\n      if (afterIndex < 0) {\n        return null;\n      } else {\n        return str.substring(beforeIndex, afterIndex);\n      }\n    }\n\n    return str.substring(beforeIndex);\n  }\n\n  function getStudyInstanceUIDFromUri(uri) {\n    var uid = findSubstring(uri, \"studies/\", \"/series\");\n\n    if (!uid) {\n      var uid = findSubstring(uri, \"studies/\");\n    }\n\n    if (!uid) {\n      console.debug('Study Instance UID could not be dertermined from URI \"' + uri + '\"');\n    }\n\n    return uid;\n  }\n\n  function getSeriesInstanceUIDFromUri(uri) {\n    var uid = findSubstring(uri, \"series/\", \"/instances\");\n\n    if (!uid) {\n      var uid = findSubstring(uri, \"series/\");\n    }\n\n    if (!uid) {\n      console.debug('Series Instance UID could not be dertermined from URI \"' + uri + '\"');\n    }\n\n    return uid;\n  }\n\n  function getSOPInstanceUIDFromUri(uri) {\n    var uid = findSubstring(uri, \"/instances/\", \"/frames\");\n\n    if (!uid) {\n      var uid = findSubstring(uri, \"/instances/\", \"/metadata\");\n    }\n\n    if (!uid) {\n      var uid = findSubstring(uri, \"/instances/\");\n    }\n\n    if (!uid) {\n      console.debug('SOP Instance UID could not be dertermined from URI\"' + uri + '\"');\n    }\n\n    return uid;\n  }\n\n  function getFrameNumbersFromUri(uri) {\n    var numbers = findSubstring(uri, \"/frames/\");\n\n    if (numbers === undefined) {\n      console.debug('Frames Numbers could not be dertermined from URI\"' + uri + '\"');\n    }\n\n    return numbers.split(',');\n  }\n\n  var version = '0.3.2';\n\n  var api = {\n    DICOMwebClient: DICOMwebClient\n  };\n  var utils = {\n    getStudyInstanceUIDFromUri: getStudyInstanceUIDFromUri,\n    getSeriesInstanceUIDFromUri: getSeriesInstanceUIDFromUri,\n    getSOPInstanceUIDFromUri: getSOPInstanceUIDFromUri,\n    getFrameNumbersFromUri: getFrameNumbersFromUri\n  };\n\n  exports.api = api;\n  exports.utils = utils;\n  exports.version = version;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=dicomweb-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/dicomweb-client/build/dicomweb-client.js\n")}}]);